# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreatePostInput {
  """min lenth: 8"""
  content: String!

  """min length: 3 chars"""
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Follower {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  followedBy: Int
  followers: [User!]
  followings: [User!]
  id: ID!
  isFav: Boolean

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userId: Int
}

"""User Gender"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!

  """
  API to create a post.
   Auth Required 
  """
  createPost(data: CreatePostInput!): Post!
  followUser(userId: Int!): Follower!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updateUser(data: UpdateUserInput!): User!
  updateUserProfile(data: UpdateProfileInput!): UserResponse!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User!
  authorId: Int!
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type PostConnection {
  count: Int!
  limit: Int
  msg: String
  page: Int
  payload: [Post!]
  status: String
}

type PostCursorConnection {
  edges: [PostEdge!]
  edgesCount: Int!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

input PostOrder {
  direction: OrderDirection!
  field: PostOrderField!
}

"""Properties by which post connections can be ordered."""
enum PostOrderField {
  content
  createdAt
  id
  published
  title
  updatedAt
}

type ProfileResponse {
  msg: String!
  payload: UserProfile
  status: Int!
}

type Query {
  allUsers: UserConnection!
  getAllPosts(getAllPostInput: getAllPostInput!): PostConnection!
  getAllPublishedPosts(after: String, before: String, limit: Int!, orderBy: PostOrder, query: String): PostCursorConnection!
  getMyProfile: ProfileResponse!
  getPost(postId: Int!): Post!
  getSingleUser: UserResponse!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  searchUserByName(data: SearchByNameInput!): UserConnection!
  userPosts(limit: Int = 20, orderBy: PostOrderField!, page: Int = 1, userId: Int): PostConnection!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SearchByNameInput {
  name: String!
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  name: String!
  password: String!
}

type Subscription {
  postCreated: Post!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateProfileInput {
  bio: String
  country: String
  gender: Gender!
  job: String
  website: String
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  avatar: String
  coins: Float!
  createdAt: DateTime!
  dob: DateTime
  email: String
  firstName: String
  followers: [User!]
  followings: [User!]
  id: Int!
  isDeleted: Boolean!
  isRegister: Boolean!
  isVerified: Boolean!
  lastName: String
  name: String!
  nonce: String
  phoneNumber: String
  posts: PostConnection
  profile: UserProfile
  role: Role!
  tcgAvatar: String
  updatedAt: DateTime!
  userInfo: Int
  userType: Int
  walletAddress: String
}

type UserConnection {
  count: Int!
  limit: Int
  msg: String
  page: Int
  payload: [User!]
  status: String
}

type UserProfile {
  bio: String
  country: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  gender: Gender
  id: ID!
  isDeleted: DateTime
  job: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userId: Int!
  website: String
}

type UserResponse {
  msg: String!
  payload: User
  status: Int!
}

input getAllPostInput {
  limit: Int = 20
  orderBy: PostOrderField!
  page: Int = 1
}
