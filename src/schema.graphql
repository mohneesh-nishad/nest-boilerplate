# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreatePostInput {
  content: String!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type IFollowers {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  followedBy: Int!
  id: ID!
  isFav: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userId: Int!
}

type IPost {
  author: User!
  authorId: Int!
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createPost(data: CreatePostInput!): IPost!
  followUser(userId: Int!): IFollowers!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updateUser(data: UpdateUserInput!): User!
}

type PostBulkRes {
  count: Int!
  msg: String!
  payload: [IPost!]!
  status: String!
}

type Query {
  allUsers: UserResponse!
  getPost(postId: Int!): IPost!
  getSingleUser: User!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  searchUserByName(data: SearchByNameInput!): UserResponse!
  userPosts(userId: Int): PostBulkRes!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SearchByNameInput {
  name: String!
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  name: String!
  password: String!
}

type Subscription {
  postCreated: IPost!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  avatar: String
  coins: Float!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  dob: DateTime
  email: String!
  firstName: String
  followers: [User!]
  id: ID!
  isDeleted: Boolean!
  isRegister: Boolean!
  isVerified: Boolean!
  lastName: String
  name: String!
  nonce: String!
  phoneNumber: String
  role: Role!
  tcgAvatar: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userInfo: Int
  userType: Int
  walletAddress: String!
}

type UserResponse {
  count: Int!
  msg: String!
  payload: [User!]!
}
